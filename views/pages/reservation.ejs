<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reservation</title>
    <link rel="stylesheet" href="../assets/css/style.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body>

    <div class="container">
        <header class="d-flex flex-wrap justify-content-center py-3 mb-4 border-bottom">
          <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto link-body-emphasis text-decoration-none">
            <svg class="bi me-2" width="40" height="32"><use xlink:href="#bootstrap"></use></svg>
            <span class="fs-4"> Reservation Room</span>
          </a>
    
          <ul class="nav nav-pills">
            <li class="nav-item"><a href="/views/myReservation" class="nav-link " aria-current="page">My space</a></li>
            <li class="nav-item"><a href="/views/reservation" class="nav-link active">Reservation</a></li>
            <li class="nav-item"><a href="/views/salles" class="nav-link" >Rooms</a></li>
            <li class="nav-item"><a href="/views/calender" class="nav-link " >Calender</a></li>
          
            <button id="deleteLocalStorageBtn" class="btn btn-success" style="float:right">logout</button>
          </ul>
        </header>
      </div>



    <h2 class="d-flex flex-wrap justify-content-center py-3 mb-4 border-bottom">Reservation System</h2>


    <form action="/api/res/addRes" method="post">


            
      <label for="salles-list">Choose a Room :</label><br>
      <select id="salles-list" class="formGroup"></select>
  
      <!-- Hidden input field to store the selected salle ID -->
      <input class="form-control" type="hidden" id="selected-salle-id" name="salle">
  
      <div class="formGroup">
          
          <input type="hidden" name="client" id="myField" value="" />  
      </div>
      <div class="formGroup">
          <label for="salles-list">star Time</label><br>
          <input class="form-control" type="datetime-local" name="starTime" > 
      </div>
      <div class="formGroup">
          <label for="salles-list">End Time</label><br>
          <input class="form-control" type="datetime-local" name="endTime" > 
      </div>
      <button type="submit" class="btn btn-success">Create</button>
</form> 
   

    <!--add  resevation -->
   

<script>

            document.addEventListener('DOMContentLoaded', function() {
                        const cId = window.localStorage.getItem('user');
                        console.log(cId);
                        document.getElementById('myField').value  = cId;
                    });
                window.onload = async function() {
                const sallesList = document.getElementById("salles-list");
                const selectedSalleIdInput = document.getElementById("selected-salle-id");

                try {
                    const response = await fetch("/api/salle/getAll");
                    const sallesData = await response.json();


                    // Clear any existing options
                    sallesList.innerHTML = '';

                    // Populate the select options
                    sallesData.forEach(salle => {
                        const option = document.createElement("option");
                        option.value = salle._id;
                        option.textContent = salle.numero;
                        sallesList.appendChild(option);
                    });

                    // Update the hidden input field with the selected salle ID when the user makes a selection
                    sallesList.addEventListener("change", function() {
                        selectedSalleIdInput.value = sallesList.value;
                        console.log("Selected salle ID:", selectedSalleIdInput.value);
                    });
                } catch (error) {
                    console.error("Error fetching salles:", error);
                }
            };

</script>
<script>
    document.getElementById('deleteLocalStorageBtn').addEventListener('click', function() {
        // Clear the local storage
        localStorage.clear();
        window.location.replace("http://localhost:5000/views/login");
    });
    </script>
    <!---->
    <script>
        async function fetchData() {
          try {
            // Replace this with the provided data source URL
            const response = await fetch('http://localhost:5000/api/res/get/getAll');
            const data = await response.json();
            return data;
          } catch (error) {
            console.error('Error fetching data:', error);
            return [];
          }
        }
        
        async function updateTable() {
          const roomNumberSelect = document.getElementById("roomNumberSelect");
          roomNumberSelect.innerHTML = '<option value="">Select a Room Number</option>';
        
          const data = await fetchData();
          if (data.length > 0) {
            const uniqueRoomNumbers = [...new Set(data.map(room => room.numero))];
            uniqueRoomNumbers.forEach(roomNumber => {
              const option = document.createElement('option');
              option.value = roomNumber;
              option.textContent = roomNumber;
              roomNumberSelect.appendChild(option);
            });
          }
        }
        
        async function displayRoomData() {
          const selectedRoomNumber = document.getElementById("roomNumberSelect").value;
          const selectedDate = document.getElementById("dateSelect").value;
          const tableBody = document.getElementById("roomDataBody");
          tableBody.innerHTML = "";
        
          const data = await fetchData();
          if (data.length > 0) {
            const filteredRooms = data.filter(room => room.numero === selectedRoomNumber && room.starTime && room.starTime.startsWith(selectedDate));
            if (filteredRooms.length > 0) {
              filteredRooms.forEach(room => {
                const newRow = tableBody.insertRow();
                newRow.insertCell().textContent = room.numero;
                newRow.insertCell().textContent = room.capacite;
                newRow.insertCell().textContent = formatDate(room.starTime);
                newRow.insertCell().textContent = formatTime(room.starTime);
                newRow.insertCell().textContent = formatDate(room.endTime);
                newRow.insertCell().textContent = formatTime(room.endTime);
              });
            } else {
              const newRow = tableBody.insertRow();
              const newCell = newRow.insertCell();
              newCell.colSpan = 6;
              newCell.textContent = "No data found for the selected room number and date.";
            }
          }
        }
        
        // Populate the select options and table initially
        updateTable();
        
        function formatDate(dateTimeString) {
          const date = new Date(dateTimeString);
          return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
        }
        
        function formatTime(dateTimeString) {
          const date = new Date(dateTimeString);
          return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
        }
        
        </script>
</body>
</html> 